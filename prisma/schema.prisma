// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enum for user roles
// ADMIN = 1 (full access to admin panel and all actions)
// USER  = 2 (can view posts, like, comment if logged in)
enum Role {
  ADMIN @map("1")
  USER  @map("2")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  phone     String   @unique
  role      Role     @default(USER)
  createdAt DateTime @default(now()) @db.Timestamp(0)

  // Relations
  posts     Post[]
  likes     Like[]
  comments  Comment[]
}

model Post {
  id        Int       @id @default(autoincrement())
  text      String?   // Optional text content
  imageUrl  String?   // Optional image URL
  createdAt DateTime  @default(now()) @db.Timestamp(0)

  // Relations
  authorId  Int
  author    User      @relation(fields: [authorId], references: [id])
  likes     Like[]
  comments  Comment[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamp(0)

  // Relations
  userId    Int
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@unique([userId, postId]) // Prevent duplicate likes from same user
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now()) @db.Timestamp(0)

  // Relations
  userId    Int
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}






